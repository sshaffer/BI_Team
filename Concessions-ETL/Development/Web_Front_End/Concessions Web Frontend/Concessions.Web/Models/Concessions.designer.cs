#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Concessions.Web.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Concessions")]
	public partial class ConcessionsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertConfiguration(Configuration instance);
    partial void UpdateConfiguration(Configuration instance);
    partial void DeleteConfiguration(Configuration instance);
    partial void InsertConcession(Concession instance);
    partial void UpdateConcession(Concession instance);
    partial void DeleteConcession(Concession instance);
    partial void InsertConcessionConfiguration(ConcessionConfiguration instance);
    partial void UpdateConcessionConfiguration(ConcessionConfiguration instance);
    partial void DeleteConcessionConfiguration(ConcessionConfiguration instance);
    partial void InsertSSISPackageLog(SSISPackageLog instance);
    partial void UpdateSSISPackageLog(SSISPackageLog instance);
    partial void DeleteSSISPackageLog(SSISPackageLog instance);
    partial void InsertSSISPackageLogDetail(SSISPackageLogDetail instance);
    partial void UpdateSSISPackageLogDetail(SSISPackageLogDetail instance);
    partial void DeleteSSISPackageLogDetail(SSISPackageLogDetail instance);
    partial void InsertSSISPackageLogDetailErrorRecord(SSISPackageLogDetailErrorRecord instance);
    partial void UpdateSSISPackageLogDetailErrorRecord(SSISPackageLogDetailErrorRecord instance);
    partial void DeleteSSISPackageLogDetailErrorRecord(SSISPackageLogDetailErrorRecord instance);
    partial void InsertSSISPackageLogResultType(SSISPackageLogResultType instance);
    partial void UpdateSSISPackageLogResultType(SSISPackageLogResultType instance);
    partial void DeleteSSISPackageLogResultType(SSISPackageLogResultType instance);
    partial void InsertSSISPackageLogReport(SSISPackageLogReport instance);
    partial void UpdateSSISPackageLogReport(SSISPackageLogReport instance);
    partial void DeleteSSISPackageLogReport(SSISPackageLogReport instance);
    #endregion
		
		public ConcessionsDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ConcessionsConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ConcessionsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ConcessionsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ConcessionsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ConcessionsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Configuration> Configurations
		{
			get
			{
				return this.GetTable<Configuration>();
			}
		}
		
		public System.Data.Linq.Table<Concession> Concessions
		{
			get
			{
				return this.GetTable<Concession>();
			}
		}
		
		public System.Data.Linq.Table<ConcessionConfiguration> ConcessionConfigurations
		{
			get
			{
				return this.GetTable<ConcessionConfiguration>();
			}
		}
		
		public System.Data.Linq.Table<SSISPackageLog> SSISPackageLogs
		{
			get
			{
				return this.GetTable<SSISPackageLog>();
			}
		}
		
		public System.Data.Linq.Table<SSISPackageLogDetail> SSISPackageLogDetails
		{
			get
			{
				return this.GetTable<SSISPackageLogDetail>();
			}
		}
		
		public System.Data.Linq.Table<SSISPackageLogDetailErrorRecord> SSISPackageLogDetailErrorRecords
		{
			get
			{
				return this.GetTable<SSISPackageLogDetailErrorRecord>();
			}
		}
		
		public System.Data.Linq.Table<SSISPackageLogResultType> SSISPackageLogResultTypes
		{
			get
			{
				return this.GetTable<SSISPackageLogResultType>();
			}
		}
		
		public System.Data.Linq.Table<SSISPackageLogReport> SSISPackageLogReports
		{
			get
			{
				return this.GetTable<SSISPackageLogReport>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Configuration")]
	public partial class Configuration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ConfigurationId;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<ConcessionConfiguration> _ConcessionConfigurations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConfigurationIdChanging(int value);
    partial void OnConfigurationIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Configuration()
		{
			this._ConcessionConfigurations = new EntitySet<ConcessionConfiguration>(new Action<ConcessionConfiguration>(this.attach_ConcessionConfigurations), new Action<ConcessionConfiguration>(this.detach_ConcessionConfigurations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigurationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ConfigurationId
		{
			get
			{
				return this._ConfigurationId;
			}
			set
			{
				if ((this._ConfigurationId != value))
				{
					this.OnConfigurationIdChanging(value);
					this.SendPropertyChanging();
					this._ConfigurationId = value;
					this.SendPropertyChanged("ConfigurationId");
					this.OnConfigurationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(1000)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(8000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_ConcessionConfiguration", Storage="_ConcessionConfigurations", ThisKey="ConfigurationId", OtherKey="ConfigurationId")]
		public EntitySet<ConcessionConfiguration> ConcessionConfigurations
		{
			get
			{
				return this._ConcessionConfigurations;
			}
			set
			{
				this._ConcessionConfigurations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConcessionConfigurations(ConcessionConfiguration entity)
		{
			this.SendPropertyChanging();
			entity.Configuration = this;
		}
		
		private void detach_ConcessionConfigurations(ConcessionConfiguration entity)
		{
			this.SendPropertyChanging();
			entity.Configuration = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Concessions")]
	public partial class Concession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<ConcessionConfiguration> _ConcessionConfigurations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Concession()
		{
			this._ConcessionConfigurations = new EntitySet<ConcessionConfiguration>(new Action<ConcessionConfiguration>(this.attach_ConcessionConfigurations), new Action<ConcessionConfiguration>(this.detach_ConcessionConfigurations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concession_ConcessionConfiguration", Storage="_ConcessionConfigurations", ThisKey="Name", OtherKey="ConcessionName")]
		public EntitySet<ConcessionConfiguration> ConcessionConfigurations
		{
			get
			{
				return this._ConcessionConfigurations;
			}
			set
			{
				this._ConcessionConfigurations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConcessionConfigurations(ConcessionConfiguration entity)
		{
			this.SendPropertyChanging();
			entity.Concession = this;
		}
		
		private void detach_ConcessionConfigurations(ConcessionConfiguration entity)
		{
			this.SendPropertyChanging();
			entity.Concession = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConcessionConfiguration")]
	public partial class ConcessionConfiguration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ConcessionName;
		
		private int _ConfigurationId;
		
		private string _value;
		
		private EntityRef<Configuration> _Configuration;
		
		private EntityRef<Concession> _Concession;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConcessionNameChanging(string value);
    partial void OnConcessionNameChanged();
    partial void OnConfigurationIdChanging(int value);
    partial void OnConfigurationIdChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    #endregion
		
		public ConcessionConfiguration()
		{
			this._Configuration = default(EntityRef<Configuration>);
			this._Concession = default(EntityRef<Concession>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConcessionName", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ConcessionName
		{
			get
			{
				return this._ConcessionName;
			}
			set
			{
				if ((this._ConcessionName != value))
				{
					if (this._Concession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConcessionNameChanging(value);
					this.SendPropertyChanging();
					this._ConcessionName = value;
					this.SendPropertyChanged("ConcessionName");
					this.OnConcessionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigurationId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ConfigurationId
		{
			get
			{
				return this._ConfigurationId;
			}
			set
			{
				if ((this._ConfigurationId != value))
				{
					if (this._Configuration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConfigurationIdChanging(value);
					this.SendPropertyChanging();
					this._ConfigurationId = value;
					this.SendPropertyChanged("ConfigurationId");
					this.OnConfigurationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="VarChar(8000)")]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_ConcessionConfiguration", Storage="_Configuration", ThisKey="ConfigurationId", OtherKey="ConfigurationId", IsForeignKey=true)]
		public Configuration Configuration
		{
			get
			{
				return this._Configuration.Entity;
			}
			set
			{
				Configuration previousValue = this._Configuration.Entity;
				if (((previousValue != value) 
							|| (this._Configuration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Configuration.Entity = null;
						previousValue.ConcessionConfigurations.Remove(this);
					}
					this._Configuration.Entity = value;
					if ((value != null))
					{
						value.ConcessionConfigurations.Add(this);
						this._ConfigurationId = value.ConfigurationId;
					}
					else
					{
						this._ConfigurationId = default(int);
					}
					this.SendPropertyChanged("Configuration");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concession_ConcessionConfiguration", Storage="_Concession", ThisKey="ConcessionName", OtherKey="Name", IsForeignKey=true)]
		public Concession Concession
		{
			get
			{
				return this._Concession.Entity;
			}
			set
			{
				Concession previousValue = this._Concession.Entity;
				if (((previousValue != value) 
							|| (this._Concession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Concession.Entity = null;
						previousValue.ConcessionConfigurations.Remove(this);
					}
					this._Concession.Entity = value;
					if ((value != null))
					{
						value.ConcessionConfigurations.Add(this);
						this._ConcessionName = value.Name;
					}
					else
					{
						this._ConcessionName = default(string);
					}
					this.SendPropertyChanged("Concession");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SSISPackageLog")]
	public partial class SSISPackageLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SSISPackageLogId;
		
		private string _PackageName;
		
		private System.DateTime _StartTime;
		
		private System.DateTime _EndTime;
		
		private int _SSISPackageLogResultTypeId;
		
		private EntitySet<SSISPackageLogDetail> _SSISPackageLogDetails;
		
		private EntitySet<SSISPackageLogReport> _SSISPackageLogReports;
		
		private EntityRef<SSISPackageLogResultType> _SSISPackageLogResultType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSSISPackageLogIdChanging(int value);
    partial void OnSSISPackageLogIdChanged();
    partial void OnPackageNameChanging(string value);
    partial void OnPackageNameChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.DateTime value);
    partial void OnEndTimeChanged();
    partial void OnSSISPackageLogResultTypeIdChanging(int value);
    partial void OnSSISPackageLogResultTypeIdChanged();
    #endregion
		
		public SSISPackageLog()
		{
			this._SSISPackageLogDetails = new EntitySet<SSISPackageLogDetail>(new Action<SSISPackageLogDetail>(this.attach_SSISPackageLogDetails), new Action<SSISPackageLogDetail>(this.detach_SSISPackageLogDetails));
			this._SSISPackageLogReports = new EntitySet<SSISPackageLogReport>(new Action<SSISPackageLogReport>(this.attach_SSISPackageLogReports), new Action<SSISPackageLogReport>(this.detach_SSISPackageLogReports));
			this._SSISPackageLogResultType = default(EntityRef<SSISPackageLogResultType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSISPackageLogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SSISPackageLogId
		{
			get
			{
				return this._SSISPackageLogId;
			}
			set
			{
				if ((this._SSISPackageLogId != value))
				{
					this.OnSSISPackageLogIdChanging(value);
					this.SendPropertyChanging();
					this._SSISPackageLogId = value;
					this.SendPropertyChanged("SSISPackageLogId");
					this.OnSSISPackageLogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PackageName
		{
			get
			{
				return this._PackageName;
			}
			set
			{
				if ((this._PackageName != value))
				{
					this.OnPackageNameChanging(value);
					this.SendPropertyChanging();
					this._PackageName = value;
					this.SendPropertyChanged("PackageName");
					this.OnPackageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime NOT NULL")]
		public System.DateTime EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSISPackageLogResultTypeId", DbType="Int NOT NULL")]
		public int SSISPackageLogResultTypeId
		{
			get
			{
				return this._SSISPackageLogResultTypeId;
			}
			set
			{
				if ((this._SSISPackageLogResultTypeId != value))
				{
					if (this._SSISPackageLogResultType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSSISPackageLogResultTypeIdChanging(value);
					this.SendPropertyChanging();
					this._SSISPackageLogResultTypeId = value;
					this.SendPropertyChanged("SSISPackageLogResultTypeId");
					this.OnSSISPackageLogResultTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SSISPackageLog_SSISPackageLogDetail", Storage="_SSISPackageLogDetails", ThisKey="SSISPackageLogId", OtherKey="SSISPackageLogID")]
		public EntitySet<SSISPackageLogDetail> SSISPackageLogDetails
		{
			get
			{
				return this._SSISPackageLogDetails;
			}
			set
			{
				this._SSISPackageLogDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SSISPackageLog_SSISPackageLogReport", Storage="_SSISPackageLogReports", ThisKey="SSISPackageLogId", OtherKey="SSISPackageLogId")]
		public EntitySet<SSISPackageLogReport> SSISPackageLogReports
		{
			get
			{
				return this._SSISPackageLogReports;
			}
			set
			{
				this._SSISPackageLogReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SSISPackageLogResultType_SSISPackageLog", Storage="_SSISPackageLogResultType", ThisKey="SSISPackageLogResultTypeId", OtherKey="SSISPackageLogResultTypesId", IsForeignKey=true)]
		public SSISPackageLogResultType SSISPackageLogResultType
		{
			get
			{
				return this._SSISPackageLogResultType.Entity;
			}
			set
			{
				SSISPackageLogResultType previousValue = this._SSISPackageLogResultType.Entity;
				if (((previousValue != value) 
							|| (this._SSISPackageLogResultType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SSISPackageLogResultType.Entity = null;
						previousValue.SSISPackageLogs.Remove(this);
					}
					this._SSISPackageLogResultType.Entity = value;
					if ((value != null))
					{
						value.SSISPackageLogs.Add(this);
						this._SSISPackageLogResultTypeId = value.SSISPackageLogResultTypesId;
					}
					else
					{
						this._SSISPackageLogResultTypeId = default(int);
					}
					this.SendPropertyChanged("SSISPackageLogResultType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SSISPackageLogDetails(SSISPackageLogDetail entity)
		{
			this.SendPropertyChanging();
			entity.SSISPackageLog = this;
		}
		
		private void detach_SSISPackageLogDetails(SSISPackageLogDetail entity)
		{
			this.SendPropertyChanging();
			entity.SSISPackageLog = null;
		}
		
		private void attach_SSISPackageLogReports(SSISPackageLogReport entity)
		{
			this.SendPropertyChanging();
			entity.SSISPackageLog = this;
		}
		
		private void detach_SSISPackageLogReports(SSISPackageLogReport entity)
		{
			this.SendPropertyChanging();
			entity.SSISPackageLog = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SSISPackageLogDetail")]
	public partial class SSISPackageLogDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SSISPackageLogDetailId;
		
		private int _SSISPackageLogID;
		
		private string _TaskName;
		
		private string _Source;
		
		private System.DateTime _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private int _RowCountSuccesses;
		
		private int _RowCountFailures;
		
		private int _SSISPackageLogResultTypeId;
		
		private int _ErrorCode;
		
		private string _ResultMessage;
		
		private EntitySet<SSISPackageLogDetailErrorRecord> _SSISPackageLogDetailErrorRecords;
		
		private EntityRef<SSISPackageLog> _SSISPackageLog;
		
		private EntityRef<SSISPackageLogResultType> _SSISPackageLogResultType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSSISPackageLogDetailIdChanging(int value);
    partial void OnSSISPackageLogDetailIdChanged();
    partial void OnSSISPackageLogIDChanging(int value);
    partial void OnSSISPackageLogIDChanged();
    partial void OnTaskNameChanging(string value);
    partial void OnTaskNameChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnRowCountSuccessesChanging(int value);
    partial void OnRowCountSuccessesChanged();
    partial void OnRowCountFailuresChanging(int value);
    partial void OnRowCountFailuresChanged();
    partial void OnSSISPackageLogResultTypeIdChanging(int value);
    partial void OnSSISPackageLogResultTypeIdChanged();
    partial void OnErrorCodeChanging(int value);
    partial void OnErrorCodeChanged();
    partial void OnResultMessageChanging(string value);
    partial void OnResultMessageChanged();
    #endregion
		
		public SSISPackageLogDetail()
		{
			this._SSISPackageLogDetailErrorRecords = new EntitySet<SSISPackageLogDetailErrorRecord>(new Action<SSISPackageLogDetailErrorRecord>(this.attach_SSISPackageLogDetailErrorRecords), new Action<SSISPackageLogDetailErrorRecord>(this.detach_SSISPackageLogDetailErrorRecords));
			this._SSISPackageLog = default(EntityRef<SSISPackageLog>);
			this._SSISPackageLogResultType = default(EntityRef<SSISPackageLogResultType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSISPackageLogDetailId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SSISPackageLogDetailId
		{
			get
			{
				return this._SSISPackageLogDetailId;
			}
			set
			{
				if ((this._SSISPackageLogDetailId != value))
				{
					this.OnSSISPackageLogDetailIdChanging(value);
					this.SendPropertyChanging();
					this._SSISPackageLogDetailId = value;
					this.SendPropertyChanged("SSISPackageLogDetailId");
					this.OnSSISPackageLogDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSISPackageLogID", DbType="Int NOT NULL")]
		public int SSISPackageLogID
		{
			get
			{
				return this._SSISPackageLogID;
			}
			set
			{
				if ((this._SSISPackageLogID != value))
				{
					if (this._SSISPackageLog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSSISPackageLogIDChanging(value);
					this.SendPropertyChanging();
					this._SSISPackageLogID = value;
					this.SendPropertyChanged("SSISPackageLogID");
					this.OnSSISPackageLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this.OnTaskNameChanging(value);
					this.SendPropertyChanging();
					this._TaskName = value;
					this.SendPropertyChanged("TaskName");
					this.OnTaskNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowCountSuccesses", DbType="Int NOT NULL")]
		public int RowCountSuccesses
		{
			get
			{
				return this._RowCountSuccesses;
			}
			set
			{
				if ((this._RowCountSuccesses != value))
				{
					this.OnRowCountSuccessesChanging(value);
					this.SendPropertyChanging();
					this._RowCountSuccesses = value;
					this.SendPropertyChanged("RowCountSuccesses");
					this.OnRowCountSuccessesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowCountFailures", DbType="Int NOT NULL")]
		public int RowCountFailures
		{
			get
			{
				return this._RowCountFailures;
			}
			set
			{
				if ((this._RowCountFailures != value))
				{
					this.OnRowCountFailuresChanging(value);
					this.SendPropertyChanging();
					this._RowCountFailures = value;
					this.SendPropertyChanged("RowCountFailures");
					this.OnRowCountFailuresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSISPackageLogResultTypeId", DbType="Int NOT NULL")]
		public int SSISPackageLogResultTypeId
		{
			get
			{
				return this._SSISPackageLogResultTypeId;
			}
			set
			{
				if ((this._SSISPackageLogResultTypeId != value))
				{
					if (this._SSISPackageLogResultType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSSISPackageLogResultTypeIdChanging(value);
					this.SendPropertyChanging();
					this._SSISPackageLogResultTypeId = value;
					this.SendPropertyChanged("SSISPackageLogResultTypeId");
					this.OnSSISPackageLogResultTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorCode", DbType="Int NOT NULL")]
		public int ErrorCode
		{
			get
			{
				return this._ErrorCode;
			}
			set
			{
				if ((this._ErrorCode != value))
				{
					this.OnErrorCodeChanging(value);
					this.SendPropertyChanging();
					this._ErrorCode = value;
					this.SendPropertyChanged("ErrorCode");
					this.OnErrorCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultMessage", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string ResultMessage
		{
			get
			{
				return this._ResultMessage;
			}
			set
			{
				if ((this._ResultMessage != value))
				{
					this.OnResultMessageChanging(value);
					this.SendPropertyChanging();
					this._ResultMessage = value;
					this.SendPropertyChanged("ResultMessage");
					this.OnResultMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SSISPackageLogDetail_SSISPackageLogDetailErrorRecord", Storage="_SSISPackageLogDetailErrorRecords", ThisKey="SSISPackageLogDetailId", OtherKey="SSISPackageLogDetailRowId")]
		public EntitySet<SSISPackageLogDetailErrorRecord> SSISPackageLogDetailErrorRecords
		{
			get
			{
				return this._SSISPackageLogDetailErrorRecords;
			}
			set
			{
				this._SSISPackageLogDetailErrorRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SSISPackageLog_SSISPackageLogDetail", Storage="_SSISPackageLog", ThisKey="SSISPackageLogID", OtherKey="SSISPackageLogId", IsForeignKey=true)]
		public SSISPackageLog SSISPackageLog
		{
			get
			{
				return this._SSISPackageLog.Entity;
			}
			set
			{
				SSISPackageLog previousValue = this._SSISPackageLog.Entity;
				if (((previousValue != value) 
							|| (this._SSISPackageLog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SSISPackageLog.Entity = null;
						previousValue.SSISPackageLogDetails.Remove(this);
					}
					this._SSISPackageLog.Entity = value;
					if ((value != null))
					{
						value.SSISPackageLogDetails.Add(this);
						this._SSISPackageLogID = value.SSISPackageLogId;
					}
					else
					{
						this._SSISPackageLogID = default(int);
					}
					this.SendPropertyChanged("SSISPackageLog");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SSISPackageLogResultType_SSISPackageLogDetail", Storage="_SSISPackageLogResultType", ThisKey="SSISPackageLogResultTypeId", OtherKey="SSISPackageLogResultTypesId", IsForeignKey=true)]
		public SSISPackageLogResultType SSISPackageLogResultType
		{
			get
			{
				return this._SSISPackageLogResultType.Entity;
			}
			set
			{
				SSISPackageLogResultType previousValue = this._SSISPackageLogResultType.Entity;
				if (((previousValue != value) 
							|| (this._SSISPackageLogResultType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SSISPackageLogResultType.Entity = null;
						previousValue.SSISPackageLogDetails.Remove(this);
					}
					this._SSISPackageLogResultType.Entity = value;
					if ((value != null))
					{
						value.SSISPackageLogDetails.Add(this);
						this._SSISPackageLogResultTypeId = value.SSISPackageLogResultTypesId;
					}
					else
					{
						this._SSISPackageLogResultTypeId = default(int);
					}
					this.SendPropertyChanged("SSISPackageLogResultType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SSISPackageLogDetailErrorRecords(SSISPackageLogDetailErrorRecord entity)
		{
			this.SendPropertyChanging();
			entity.SSISPackageLogDetail = this;
		}
		
		private void detach_SSISPackageLogDetailErrorRecords(SSISPackageLogDetailErrorRecord entity)
		{
			this.SendPropertyChanging();
			entity.SSISPackageLogDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SSISPackageLogDetailErrorRecord")]
	public partial class SSISPackageLogDetailErrorRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SSISPackageLogDetailErrorRecordId;
		
		private int _SSISPackageLogDetailRowId;
		
		private string _ErrorRecord;
		
		private System.Nullable<int> _RowNumber;
		
		private EntityRef<SSISPackageLogDetail> _SSISPackageLogDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSSISPackageLogDetailErrorRecordIdChanging(int value);
    partial void OnSSISPackageLogDetailErrorRecordIdChanged();
    partial void OnSSISPackageLogDetailRowIdChanging(int value);
    partial void OnSSISPackageLogDetailRowIdChanged();
    partial void OnErrorRecordChanging(string value);
    partial void OnErrorRecordChanged();
    partial void OnRowNumberChanging(System.Nullable<int> value);
    partial void OnRowNumberChanged();
    #endregion
		
		public SSISPackageLogDetailErrorRecord()
		{
			this._SSISPackageLogDetail = default(EntityRef<SSISPackageLogDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSISPackageLogDetailErrorRecordId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SSISPackageLogDetailErrorRecordId
		{
			get
			{
				return this._SSISPackageLogDetailErrorRecordId;
			}
			set
			{
				if ((this._SSISPackageLogDetailErrorRecordId != value))
				{
					this.OnSSISPackageLogDetailErrorRecordIdChanging(value);
					this.SendPropertyChanging();
					this._SSISPackageLogDetailErrorRecordId = value;
					this.SendPropertyChanged("SSISPackageLogDetailErrorRecordId");
					this.OnSSISPackageLogDetailErrorRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSISPackageLogDetailRowId", DbType="Int NOT NULL")]
		public int SSISPackageLogDetailRowId
		{
			get
			{
				return this._SSISPackageLogDetailRowId;
			}
			set
			{
				if ((this._SSISPackageLogDetailRowId != value))
				{
					if (this._SSISPackageLogDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSSISPackageLogDetailRowIdChanging(value);
					this.SendPropertyChanging();
					this._SSISPackageLogDetailRowId = value;
					this.SendPropertyChanged("SSISPackageLogDetailRowId");
					this.OnSSISPackageLogDetailRowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorRecord", DbType="VarChar(8000)")]
		public string ErrorRecord
		{
			get
			{
				return this._ErrorRecord;
			}
			set
			{
				if ((this._ErrorRecord != value))
				{
					this.OnErrorRecordChanging(value);
					this.SendPropertyChanging();
					this._ErrorRecord = value;
					this.SendPropertyChanged("ErrorRecord");
					this.OnErrorRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowNumber", DbType="Int")]
		public System.Nullable<int> RowNumber
		{
			get
			{
				return this._RowNumber;
			}
			set
			{
				if ((this._RowNumber != value))
				{
					this.OnRowNumberChanging(value);
					this.SendPropertyChanging();
					this._RowNumber = value;
					this.SendPropertyChanged("RowNumber");
					this.OnRowNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SSISPackageLogDetail_SSISPackageLogDetailErrorRecord", Storage="_SSISPackageLogDetail", ThisKey="SSISPackageLogDetailRowId", OtherKey="SSISPackageLogDetailId", IsForeignKey=true)]
		public SSISPackageLogDetail SSISPackageLogDetail
		{
			get
			{
				return this._SSISPackageLogDetail.Entity;
			}
			set
			{
				SSISPackageLogDetail previousValue = this._SSISPackageLogDetail.Entity;
				if (((previousValue != value) 
							|| (this._SSISPackageLogDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SSISPackageLogDetail.Entity = null;
						previousValue.SSISPackageLogDetailErrorRecords.Remove(this);
					}
					this._SSISPackageLogDetail.Entity = value;
					if ((value != null))
					{
						value.SSISPackageLogDetailErrorRecords.Add(this);
						this._SSISPackageLogDetailRowId = value.SSISPackageLogDetailId;
					}
					else
					{
						this._SSISPackageLogDetailRowId = default(int);
					}
					this.SendPropertyChanged("SSISPackageLogDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SSISPackageLogResultTypes")]
	public partial class SSISPackageLogResultType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SSISPackageLogResultTypesId;
		
		private string _ResultTypeName;
		
		private string _ResultTypeDescription;
		
		private EntitySet<SSISPackageLog> _SSISPackageLogs;
		
		private EntitySet<SSISPackageLogDetail> _SSISPackageLogDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSSISPackageLogResultTypesIdChanging(int value);
    partial void OnSSISPackageLogResultTypesIdChanged();
    partial void OnResultTypeNameChanging(string value);
    partial void OnResultTypeNameChanged();
    partial void OnResultTypeDescriptionChanging(string value);
    partial void OnResultTypeDescriptionChanged();
    #endregion
		
		public SSISPackageLogResultType()
		{
			this._SSISPackageLogs = new EntitySet<SSISPackageLog>(new Action<SSISPackageLog>(this.attach_SSISPackageLogs), new Action<SSISPackageLog>(this.detach_SSISPackageLogs));
			this._SSISPackageLogDetails = new EntitySet<SSISPackageLogDetail>(new Action<SSISPackageLogDetail>(this.attach_SSISPackageLogDetails), new Action<SSISPackageLogDetail>(this.detach_SSISPackageLogDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSISPackageLogResultTypesId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SSISPackageLogResultTypesId
		{
			get
			{
				return this._SSISPackageLogResultTypesId;
			}
			set
			{
				if ((this._SSISPackageLogResultTypesId != value))
				{
					this.OnSSISPackageLogResultTypesIdChanging(value);
					this.SendPropertyChanging();
					this._SSISPackageLogResultTypesId = value;
					this.SendPropertyChanged("SSISPackageLogResultTypesId");
					this.OnSSISPackageLogResultTypesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ResultTypeName
		{
			get
			{
				return this._ResultTypeName;
			}
			set
			{
				if ((this._ResultTypeName != value))
				{
					this.OnResultTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ResultTypeName = value;
					this.SendPropertyChanged("ResultTypeName");
					this.OnResultTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultTypeDescription", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string ResultTypeDescription
		{
			get
			{
				return this._ResultTypeDescription;
			}
			set
			{
				if ((this._ResultTypeDescription != value))
				{
					this.OnResultTypeDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ResultTypeDescription = value;
					this.SendPropertyChanged("ResultTypeDescription");
					this.OnResultTypeDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SSISPackageLogResultType_SSISPackageLog", Storage="_SSISPackageLogs", ThisKey="SSISPackageLogResultTypesId", OtherKey="SSISPackageLogResultTypeId")]
		public EntitySet<SSISPackageLog> SSISPackageLogs
		{
			get
			{
				return this._SSISPackageLogs;
			}
			set
			{
				this._SSISPackageLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SSISPackageLogResultType_SSISPackageLogDetail", Storage="_SSISPackageLogDetails", ThisKey="SSISPackageLogResultTypesId", OtherKey="SSISPackageLogResultTypeId")]
		public EntitySet<SSISPackageLogDetail> SSISPackageLogDetails
		{
			get
			{
				return this._SSISPackageLogDetails;
			}
			set
			{
				this._SSISPackageLogDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SSISPackageLogs(SSISPackageLog entity)
		{
			this.SendPropertyChanging();
			entity.SSISPackageLogResultType = this;
		}
		
		private void detach_SSISPackageLogs(SSISPackageLog entity)
		{
			this.SendPropertyChanging();
			entity.SSISPackageLogResultType = null;
		}
		
		private void attach_SSISPackageLogDetails(SSISPackageLogDetail entity)
		{
			this.SendPropertyChanging();
			entity.SSISPackageLogResultType = this;
		}
		
		private void detach_SSISPackageLogDetails(SSISPackageLogDetail entity)
		{
			this.SendPropertyChanging();
			entity.SSISPackageLogResultType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SSISPackageLogReport")]
	public partial class SSISPackageLogReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SSISPackageLogReportId;
		
		private System.Nullable<int> _SSISPackageLogId;
		
		private System.Nullable<int> _Store_Number;
		
		private System.Nullable<int> _Count_of_Sales;
		
		private System.Nullable<int> _Units_Sold;
		
		private System.Nullable<int> _Units_Returned;
		
		private System.Nullable<decimal> _Total_Refunded;
		
		private System.Nullable<decimal> _Total_Sold;
		
		private System.Nullable<decimal> _Total_Discount;
		
		private System.Nullable<decimal> _Total_Sold_Discount;
		
		private EntityRef<SSISPackageLog> _SSISPackageLog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSSISPackageLogReportIdChanging(int value);
    partial void OnSSISPackageLogReportIdChanged();
    partial void OnSSISPackageLogIdChanging(System.Nullable<int> value);
    partial void OnSSISPackageLogIdChanged();
    partial void OnStore_NumberChanging(System.Nullable<int> value);
    partial void OnStore_NumberChanged();
    partial void OnCount_of_SalesChanging(System.Nullable<int> value);
    partial void OnCount_of_SalesChanged();
    partial void OnUnits_SoldChanging(System.Nullable<int> value);
    partial void OnUnits_SoldChanged();
    partial void OnUnits_ReturnedChanging(System.Nullable<int> value);
    partial void OnUnits_ReturnedChanged();
    partial void OnTotal_RefundedChanging(System.Nullable<decimal> value);
    partial void OnTotal_RefundedChanged();
    partial void OnTotal_SoldChanging(System.Nullable<decimal> value);
    partial void OnTotal_SoldChanged();
    partial void OnTotal_DiscountChanging(System.Nullable<decimal> value);
    partial void OnTotal_DiscountChanged();
    partial void OnTotal_Sold_DiscountChanging(System.Nullable<decimal> value);
    partial void OnTotal_Sold_DiscountChanged();
    #endregion
		
		public SSISPackageLogReport()
		{
			this._SSISPackageLog = default(EntityRef<SSISPackageLog>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSISPackageLogReportId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SSISPackageLogReportId
		{
			get
			{
				return this._SSISPackageLogReportId;
			}
			set
			{
				if ((this._SSISPackageLogReportId != value))
				{
					this.OnSSISPackageLogReportIdChanging(value);
					this.SendPropertyChanging();
					this._SSISPackageLogReportId = value;
					this.SendPropertyChanged("SSISPackageLogReportId");
					this.OnSSISPackageLogReportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSISPackageLogId", DbType="Int")]
		public System.Nullable<int> SSISPackageLogId
		{
			get
			{
				return this._SSISPackageLogId;
			}
			set
			{
				if ((this._SSISPackageLogId != value))
				{
					if (this._SSISPackageLog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSSISPackageLogIdChanging(value);
					this.SendPropertyChanging();
					this._SSISPackageLogId = value;
					this.SendPropertyChanged("SSISPackageLogId");
					this.OnSSISPackageLogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Store_Number", DbType="Int")]
		public System.Nullable<int> Store_Number
		{
			get
			{
				return this._Store_Number;
			}
			set
			{
				if ((this._Store_Number != value))
				{
					this.OnStore_NumberChanging(value);
					this.SendPropertyChanging();
					this._Store_Number = value;
					this.SendPropertyChanged("Store_Number");
					this.OnStore_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count_of_Sales", DbType="Int")]
		public System.Nullable<int> Count_of_Sales
		{
			get
			{
				return this._Count_of_Sales;
			}
			set
			{
				if ((this._Count_of_Sales != value))
				{
					this.OnCount_of_SalesChanging(value);
					this.SendPropertyChanging();
					this._Count_of_Sales = value;
					this.SendPropertyChanged("Count_of_Sales");
					this.OnCount_of_SalesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Units_Sold", DbType="Int")]
		public System.Nullable<int> Units_Sold
		{
			get
			{
				return this._Units_Sold;
			}
			set
			{
				if ((this._Units_Sold != value))
				{
					this.OnUnits_SoldChanging(value);
					this.SendPropertyChanging();
					this._Units_Sold = value;
					this.SendPropertyChanged("Units_Sold");
					this.OnUnits_SoldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Units_Returned", DbType="Int")]
		public System.Nullable<int> Units_Returned
		{
			get
			{
				return this._Units_Returned;
			}
			set
			{
				if ((this._Units_Returned != value))
				{
					this.OnUnits_ReturnedChanging(value);
					this.SendPropertyChanging();
					this._Units_Returned = value;
					this.SendPropertyChanged("Units_Returned");
					this.OnUnits_ReturnedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total_Refunded", DbType="Money")]
		public System.Nullable<decimal> Total_Refunded
		{
			get
			{
				return this._Total_Refunded;
			}
			set
			{
				if ((this._Total_Refunded != value))
				{
					this.OnTotal_RefundedChanging(value);
					this.SendPropertyChanging();
					this._Total_Refunded = value;
					this.SendPropertyChanged("Total_Refunded");
					this.OnTotal_RefundedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total_Sold", DbType="Money")]
		public System.Nullable<decimal> Total_Sold
		{
			get
			{
				return this._Total_Sold;
			}
			set
			{
				if ((this._Total_Sold != value))
				{
					this.OnTotal_SoldChanging(value);
					this.SendPropertyChanging();
					this._Total_Sold = value;
					this.SendPropertyChanged("Total_Sold");
					this.OnTotal_SoldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total_Discount", DbType="Money")]
		public System.Nullable<decimal> Total_Discount
		{
			get
			{
				return this._Total_Discount;
			}
			set
			{
				if ((this._Total_Discount != value))
				{
					this.OnTotal_DiscountChanging(value);
					this.SendPropertyChanging();
					this._Total_Discount = value;
					this.SendPropertyChanged("Total_Discount");
					this.OnTotal_DiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total_Sold_Discount", DbType="Money")]
		public System.Nullable<decimal> Total_Sold_Discount
		{
			get
			{
				return this._Total_Sold_Discount;
			}
			set
			{
				if ((this._Total_Sold_Discount != value))
				{
					this.OnTotal_Sold_DiscountChanging(value);
					this.SendPropertyChanging();
					this._Total_Sold_Discount = value;
					this.SendPropertyChanged("Total_Sold_Discount");
					this.OnTotal_Sold_DiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SSISPackageLog_SSISPackageLogReport", Storage="_SSISPackageLog", ThisKey="SSISPackageLogId", OtherKey="SSISPackageLogId", IsForeignKey=true)]
		public SSISPackageLog SSISPackageLog
		{
			get
			{
				return this._SSISPackageLog.Entity;
			}
			set
			{
				SSISPackageLog previousValue = this._SSISPackageLog.Entity;
				if (((previousValue != value) 
							|| (this._SSISPackageLog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SSISPackageLog.Entity = null;
						previousValue.SSISPackageLogReports.Remove(this);
					}
					this._SSISPackageLog.Entity = value;
					if ((value != null))
					{
						value.SSISPackageLogReports.Add(this);
						this._SSISPackageLogId = value.SSISPackageLogId;
					}
					else
					{
						this._SSISPackageLogId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SSISPackageLog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
